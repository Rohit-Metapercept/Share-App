{"version":3,"sources":["../src/index.js"],"names":["config","update","region","s3","S3","email","createTransport","storageDir","join","__dirname","upload","storage","bucket","metadata","req","file","cb","fieldName","fieldname","key","filename","Date","now","toString","originalname","PORT","app","server","createServer","use","exposedHeaders","json","limit","set","err","db","console","log","listen","process","env","address","port"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;AACA;;;;AACA;;AAGA;;;;AACA;;;;;;AAFA;AAJ8C;AAHN;;AANA;AAkBxC,iBAAIA,MAAJ,CAAWC,MAAX,mB,CAViD;AAH2B;;;AAe5E,iBAAID,MAAJ,CAAWE,MAAX;;AAEA,IAAMC,KAAK,IAAI,iBAAIC,EAAR,EAAX;;AAIA;;AAEA,IAAIC,QAAQ,qBAAWC,eAAX,cAAZ;;AAGA;;AAEA,IAAMC,aAAa,eAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,SAA3B,CAAnB,C,CAAiE;;;AAGjE;;AAEA,IAAMC,SAAS,sBAAO,EAAkB;AACpCC,aAAS,uBAAS;AACdR,YAAIA,EADU;AAEdS,gCAFc;AAGdC,kBAAU,kBAAUC,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyB;AAC/BA,eAAG,IAAH,EAAS,EAACC,WAAWF,KAAKG,SAAjB,EAAT;AACH,SALa;AAMdC,aAAK,aAAUL,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyB;AAC1B,gBAAMI,WAAcC,KAAKC,GAAL,GAAWC,QAAX,EAAd,SAAuCR,KAAKS,YAAlD;AACAR,eAAG,IAAH,EAASI,QAAT;AACH;AATa,KAAT;AADS,CAAP,CAAf;;AAgBA;;AAEA,IAAMK,OAAO,IAAb;AACA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,MAAJ,GAAa,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;;AAGAA,IAAIG,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAGAH,IAAIG,GAAJ,CAAQ,oBAAK;AACTC,oBAAgB;AADP,CAAL,CAAR;;AAIAJ,IAAIG,GAAJ,CAAQ,qBAAWE,IAAX,CAAgB;AACpBC,WAAO;AADa,CAAhB,CAAR;;AAKAN,IAAIO,GAAJ,CAAQ,MAAR,EAAgBxB,SAAhB;AACAiB,IAAIO,GAAJ,CAAQ,YAAR,EAAsB1B,UAAtB;AACAmB,IAAIhB,MAAJ,GAAaA,MAAb;AACAgB,IAAIrB,KAAJ,GAAYA,KAAZ;AACAqB,IAAIvB,EAAJ,GAASA,EAAT;;AAEA;;AAEA,uBAAQ,UAAC+B,GAAD,EAAMC,EAAN,EAAa;AAAoB;;AAErC,QAAGD,GAAH,EAAO;AACHE,gBAAQC,GAAR,CAAY,qCAAZ,EAAmDH,GAAnD;AACA,cAAOA,GAAP;AACH;;AAEDR,QAAIS,EAAJ,GAASA,EAAT;AACAT,QAAIO,GAAJ,CAAQ,IAAR,EAAcE,EAAd;;AAGA;AACA,yBAAcT,GAAd;;AAGAA,QAAIC,MAAJ,CAAWW,MAAX,CAAkBC,QAAQC,GAAR,CAAYf,IAAZ,IAAoBA,IAAtC,EAA4C,YAAM;AAC9CW,gBAAQC,GAAR,6BAAsCX,IAAIC,MAAJ,CAAWc,OAAX,GAAqBC,IAA3D;AACH,KAFD;AAIH,CAnBD;;kBAuBehB,G,EAAwB","file":"index.js","sourcesContent":["import http from 'http';\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//From EP:1\r\nimport express from 'express';\r\nimport cors from 'cors';\r\nimport morgan from 'morgan';\r\nimport bodyParser from 'body-parser';\r\nimport multer from 'multer'                                             \t\t\t\t//From EP:1\r\nimport path from 'path';\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//From EP:1\r\n\r\nimport {connect} from \"./database\";\t\t\t\t\t\t\t\t\t\t\t\t\t\t//From EP:1\r\nimport AppRouter from './router'\t\t\t\t\t\t\t\t\t\t\t\t\t\t//From EP:1\r\nimport nodemailer from 'nodemailer'\r\nimport {smtp, s3Config, s3Region,s3Bucket} from './config'\r\n\r\n// Amazon S3 Setup\r\nimport AWS from 'aws-sdk'\r\nimport multerS3 from 'multer-s3'\r\n\r\n\r\nAWS.config.update(s3Config);\r\n\r\nAWS.config.region = s3Region ;\r\n\r\nconst s3 = new AWS.S3();\r\n\r\n\r\n\r\n// Setup Email\r\n\r\nlet email = nodemailer.createTransport(smtp);\r\n\r\n\r\n// File storage config\r\n\r\nconst storageDir = path.join(__dirname, '..', 'storage');\t\t\t\t\t\t\t\t//From EP:1\r\n\r\n\r\n//const upload = multer({ storage: storageConfig }); // local upload.\r\n\r\nconst upload = multer({\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//From EP:1\r\n    storage: multerS3({\r\n        s3: s3,\r\n        bucket: s3Bucket,\r\n        metadata: function (req, file, cb) {\r\n            cb(null, {fieldName: file.fieldname});\r\n        },\r\n        key: function (req, file, cb) {\r\n            const filename = `${Date.now().toString()}-${file.originalname}`;\r\n            cb(null, filename)\r\n        }\r\n    })\r\n})\r\n\r\n\r\n\r\n// End file storage config\r\n\r\nconst PORT = 3000;\r\nconst app = express();\r\napp.server = http.createServer(app);\r\n\r\n\r\napp.use(morgan('dev'));\r\n\r\n\r\napp.use(cors({\r\n    exposedHeaders: \"*\"\r\n}));\r\n\r\napp.use(bodyParser.json({\r\n    limit: '50mb'\r\n}));\r\n\r\n\r\napp.set('root', __dirname);\r\napp.set('storageDir', storageDir);\r\napp.upload = upload;\r\napp.email = email;\r\napp.s3 = s3;\r\n\r\n//Connect to the database.    This block is from EP1\r\n\r\nconnect((err, db) => {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//From EP:1\r\n\r\n    if(err){\r\n        console.log(\"An error connecting to the database\", err);\r\n        throw (err);\r\n    }\r\n\r\n    app.db = db;\r\n    app.set('db', db);\r\n\r\n\r\n    // init routers.\r\n    new AppRouter(app);\r\n\r\n\r\n    app.server.listen(process.env.PORT || PORT, () => {\r\n        console.log(`App is running on port ${app.server.address().port}`);\r\n    });\r\n\r\n});\r\n\r\n\r\n\r\nexport default app;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//From EP:1"]}