{"version":3,"sources":["../src/router.js"],"names":["AppRouter","app","setupRouters","db","get","uploadDir","upload","req","res","next","status","json","version","post","array","files","fileModels","each","fileObject","newFile","initWithObject","toJSON","push","length","collection","insertMany","err","result","error","message","from","to","insertedIds","insertOne","sendEmail","sendDownloadLink","info","fileId","params","id","find","_id","toArray","fileName","file","downloader","downloadUrl","getDownloadUrl","redirect","postId","getPostById","archiver","download","body","console","log","user","create","newUser","email","password","login","token","auth","checkAuth","isLoggedIn","userId","findById","obj","callback","postObjectId","limit","results","Error","fileIds","$in"],"mappings":"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","file":"router.js","sourcesContent":["import path from 'path'\r\nimport {version} from '../package.json'\r\nimport _ from 'lodash'\r\nimport File from './models/file'\r\nimport Post from './models/post'\r\nimport {ObjectID} from 'mongodb'\r\nimport FileArchiver from './archiver'\r\nimport Email from './email'\r\nimport S3 from './s3'\r\nimport User from './models/user'\r\nimport Auth from './models/auth'\r\n\r\nclass AppRouter {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//From EP:1\r\n\r\n    constructor(app) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//From EP:1\r\n        this.app = app;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//From EP:1\r\n        this.setupRouters();\t\t\t\t\t\t\t\t\t\t\t\t\t//From EP:1\r\n    }\t\r\n\t\r\n\r\n    setupRouters() {\r\n\r\n        const app = this.app;\t\t\t\t\t\t\t\t\t\t\t\t\t//From EP:1\r\n        const db = app.get('db');\t\t\t\t\t\t\t\t\t\t\t\t//From EP:1\r\n        const uploadDir = app.get('storageDir');\t\t\t\t\t\t\t\t//From EP:1\r\n        const upload = app.upload;\t\t\t\t\t\t\t\t\t\t\t\t//From EP:1\r\n\r\n        // root routing.\r\n        app.get('/', (req, res, next) => {\t\t\t\t\t\t\t\t\t\t\r\n\r\n            return res.status(200).json({\r\n                version: version\r\n            });\r\n\r\n        });\r\n\r\n        // Upload routing\r\n        app.post('/api/upload', upload.array('files'), (req, res, next) => {\r\n            const files = _.get(req, 'files', []);\r\n\r\n\r\n            let fileModels = [];\r\n\r\n\r\n            _.each(files, (fileObject) => {\r\n                const newFile = new File(app).initWithObject(fileObject).toJSON();\r\n                fileModels.push(newFile);\r\n            });\r\n\r\n\r\n            if (fileModels.length) {\r\n\r\n                db.collection('files').insertMany(fileModels, (err, result) => {\r\n                    if (err) {\r\n\r\n                        return res.status(503).json({\r\n                            error: {\r\n                                message: \"Unable saved your files.\",\r\n                            }\r\n                        });\r\n                    }\r\n\r\n\r\n                    let post = new Post(app).initWithObject({\r\n\r\n                        from: _.get(req, 'body.from'),\r\n                        to: _.get(req, 'body.to'),\r\n                        message: _.get(req, 'body.message'),\r\n                        files: result.insertedIds,\r\n                    }).toJSON();\r\n\r\n\r\n                    // let save post object to posts collection.\r\n\r\n                    db.collection('posts').insertOne(post, (err, result) => {\r\n\r\n\r\n                        if (err) {\r\n                            return res.status(503).json({error: {message: \"Your upload could not be saved.\"}});\r\n                        }\r\n\r\n                        //implement email sending to user with download link.\r\n\r\n                        // send email\r\n                        const sendEmail = new Email(app).sendDownloadLink(post, (err, info) => {\r\n\r\n\r\n                        });\r\n\r\n\r\n                        // callback to react app with post detail.\r\n                        return res.json(post);\r\n\r\n                    });\r\n\r\n\r\n                });\r\n\r\n            } else {\r\n\r\n                return res.status(503).json({\r\n                    error: {message: \"Files upload is required.\"}\r\n                });\r\n            }\r\n        });\r\n\r\n        // Download routing\r\n\r\n        app.get('/api/download/:id', (req, res, next) => {\r\n\r\n            const fileId = req.params.id;\r\n            db.collection('files').find({_id: ObjectID(fileId)}).toArray((err, result) => {\r\n\r\n                const fileName = _.get(result, '[0].name');\r\n                if (err || !fileName) {\r\n\r\n                    return res.status(404).json({\r\n                        error: {\r\n                            message: \"File not found.\"\r\n                        }\r\n                    })\r\n                }\r\n\r\n\r\n                // Download file from S3 service\r\n                const file = _.get(result, '[0]');\r\n                const downloader = new S3(app, res);\r\n\r\n\r\n                // return downloader.download(file); Proxy download from s3 service\r\n\r\n                // Download Directly from S3\r\n\r\n\r\n                const downloadUrl = downloader.getDownloadUrl(file);\r\n\r\n                return res.redirect(downloadUrl);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                /*const filePath = path.join(uploadDir, fileName);\r\n\r\n                return res.download(filePath, _.get(result, '[0].originalName'), (err) => {\r\n\r\n                    if (err) {\r\n\r\n                        return res.status(404).json({\r\n\r\n                            error: {\r\n                                message: \"File not found\"\r\n                            }\r\n                        });\r\n                    } else {\r\n\r\n                        console.log(\"File is downloaded.\");\r\n\r\n                    }\r\n\r\n                });*/\r\n\r\n\r\n\r\n            });\r\n\r\n\r\n        });\r\n\r\n\r\n        // routing for post detail /api/posts/:id\r\n\r\n        app.get('/api/posts/:id', (req, res, next) => {\r\n\r\n            const postId = _.get(req, 'params.id');\r\n\r\n            this.getPostById(postId, (err, result) => {\r\n\r\n\r\n                if (err) {\r\n                    return res.status(404).json({error: {message: 'File not found.'}});\r\n                }\r\n\r\n                return res.json(result);\r\n            })\r\n\r\n\r\n        });\r\n\r\n        // Routing download zip files.\r\n        app.get('/api/posts/:id/download', (req, res, next) => {\r\n\r\n            const id = _.get(req, 'params.id', null);\r\n\r\n\r\n            this.getPostById(id, (err, result) => {\r\n\r\n                if (err) {\r\n                    return res.status(404).json({error: {message: 'File not found.'}});\r\n                }\r\n\r\n                const files = _.get(result, 'files', []);\r\n                const archiver = new FileArchiver(app, files, res).download();\r\n                return archiver;\r\n\r\n            })\r\n        });\r\n\r\n\r\n        // Create new users post\r\n\r\n        app.post('/api/users', (req, res, next) => {\r\n\r\n        \r\n\r\n            const body = _.get(req, 'body');\r\n\r\n            console.log(\"Data from fontend posted: \", body);\r\n\r\n            const user = new User(app);\r\n            user.initWithObject(body).create((err, newUser) => {\r\n\r\n\r\n                console.log(\"New user created with error & callback\", err, newUser);\r\n\r\n\r\n                if(err){\r\n                    return res.status(503).json({\r\n                        error: {message: err}\r\n                    });\r\n                }\r\n                return res.status(200).json(newUser);\r\n            });\r\n\r\n\r\n\r\n        });\r\n\r\n\r\n        // Login user \r\n\r\n        app.post('/api/users/login', (req, res, next) => {\r\n\r\n            const body = _.get(req, 'body', {});\r\n\r\n            const user = new User(app);\r\n\r\n            const email = _.get(body, 'email');\r\n            const password = _.get(body, 'password');\r\n\r\n\r\n            user.login(email, password, (err, token) => {\r\n\r\n                    if(err){\r\n\r\n                        return res.status(401).json({\r\n                            message: \"An error login your account. Please try again!\"\r\n                        });\r\n                    }\r\n\r\n                    return res.status(200).json(token);\r\n            });\r\n\r\n\r\n            \r\n\r\n        });\r\n\r\n        // get my profile detail\r\n        app.get('/api/users/:id', (req, res, next) => {\r\n\r\n\r\n\r\n            const auth = new Auth(app);\r\n\r\n            auth.checkAuth(req, (isLoggedIn) => {\r\n\r\n\r\n                if(!isLoggedIn){\r\n\r\n                    return res.status(401).json({\r\n                        message: \"Unauthorized\"\r\n                    });\r\n                }\r\n\r\n\r\n                const userId = _.get(req, 'params.id', null);\r\n\r\n                const user = new User(app).findById(userId, (err, obj) => {\r\n\r\n\r\n                        if(err){\r\n\r\n                            return res.status(404).json({\r\n                                message: \"User not found.\"\r\n                            });\r\n                        }\r\n\r\n                        return res.status(200).json(obj);\r\n\r\n                 });\r\n\r\n\r\n\r\n            });\r\n\r\n            \r\n\r\n\r\n\r\n            \r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n    getPostById(id, callback = () => {\r\n    }) {\r\n\r\n\r\n        const app = this.app;\r\n\r\n        const db = app.get('db');\r\n\r\n\r\n        let postObjectId = null;\r\n        try {\r\n            postObjectId = new ObjectID(id);\r\n        }\r\n        catch (err) {\r\n\r\n            return callback(err, null);\r\n\r\n        }\r\n\r\n        db.collection('posts').find({_id: postObjectId}).limit(1).toArray((err, results) => {\r\n            let result = _.get(results, '[0]');\r\n\r\n            if (err || !result) {\r\n                return callback(err ? err : new Error(\"File not found.\"));\r\n            }\r\n\r\n            const fileIds = _.get(result, 'files', []);\r\n\r\n            db.collection('files').find({_id: {$in: fileIds}}).toArray((err, files) => {\r\n\r\n                if (err || !files || !files.length) {\r\n                    return callback(err ? err : new Error(\"File not found.\"));\r\n                }\r\n\r\n                result.files = files;\r\n\r\n\r\n                return callback(null, result);\r\n\r\n            });\r\n\r\n\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default AppRouter;"]}